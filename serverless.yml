service: supranobackend
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'
custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverless-offline:
    httpPort: 3000
    port: 3000
    host: 0.0.0.0
    resourceRoutes: true`

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    URL: { "Fn::Join" : ["", [" https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}/" ] ]  }
    BASE_URL: https://pdsnww5yf1.execute-api.us-east-1.amazonaws.com/dev
    STRIPE_SECRET: 
    JWT_SECRET: 
    JWT_EXPIRY: 7d
    SALT_ROUNDS: 10
    SMTP_HOST: smtp.gmail.com
    SMTP_PORT: 465
    SMTP_USER: <Email>
    SMTP_PASSWORD: <Password>  
    SMTP_ADMIN_EMAIL: <Admin Email>
    FCM_SERVER_KEY: '' #firebase messaging(notification key)
# you can overwrite defaults here
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
          - dynamodb:*
      Resource: '*'
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  - ${file(./app/controllers/subscription/subscription.functions.yml)}
  - ${file(./app/controllers/auth/auth.functions.yml)}
  - ${file(./app/controllers/user/user.functions.yml)}
  - ${file(./app/controllers/payment/payment.functions.yml)}
  - ${file(./app/controllers/shopping/category/category.functions.yml)}
  - ${file(./app/controllers/shopping/product/product.functions.yml)}
  - ${file(./app/controllers/shopping/cartItem/cartItem.functions.yml)}
  - ${file(./app/controllers/shopping/placeOrder/placeOrder.functions.yml)}
  - ${file(./app/controllers/shopping/coupon/coupon.functions.yml)}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources: # CloudFormation template syntax from here on.
    Resources:      
      ${file(./schemas/merged.schema.yml)}

# resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-offline
